#!/bin/bash

function commandExists
{
  type "$1" &> /dev/null;
}

function checkDeps
{
  local depRequired=("dialog" "sqlite3" "openssl")
  local depMissing=()
  for ((i=0; i<${#depRequired[@]}; i++))
  do
    local dep="${depRequired[$i]}"
    commandExists "${dep}"
    if [ "$?" -ne 0 ]; then
      depMissing+=("${dep}")
    fi
  done
  
  if [ ${#depMissing[@]} -gt 0 ]; then
    echo "There are missing dependencies:"
    for ((i=0; i<${#depMissing[@]}; i++))
    do
      echo " * ${depMissing[$i]}"
    done
    exit 1
  fi
}

function askForDirectoryPath
{
  chosenDir=$(dialog --stdout --title "Please choose a directory for the storage" --dselect $HOME 10 50)
  if [ $? -ne 0 ]; then
    echo "Directory path was not supplied."
    exit 1
  fi
  echo $chosenDir
}

function createFolders
{
  local rootDir=$1
  local dataDir="${rootDir}/invrepo-data"
  if [ -d "${dataDir}" ]; then
    echo "Data directory exists already."
    exit 1
  fi
  local subDirs=("import" "export" "repository/files" "repository/metadata")
  for ((i=0; i<${#subDirs[@]}; i++))
  do
    local pathToCreate="${dataDir}/${subDirs[$i]}"
    mkdir -p "${pathToCreate}" &> /dev/null
    if [ $? -ne 0 ]; then
      echo "Creating directory ${pathToCreate} was not possible - check credentials."
      exit 1
    fi
  done
}

configPath="./config"

# checking if the installation has already been run
if [ -f "${configPath}" ]; then
  echo "It seems like the installation process has already been completed."
  exit 1
fi

# checking required dependencies
checkDeps

# retrieving directory path from the user
rootDir=$(askForDirectoryPath)

# building hierarchy of folders under given rootDir
createFolders "${rootDir}"
clear

# initializing an empty sqlite database
dataRootDir="${rootDir%/}/invrepo-data"
cp "./empty.db" "${dataRootDir}/repository/metadata/metadata.db"

# creating a config file
echo "#!/bin/bash" > "${configPath}"
echo 'dataRootDir="'${dataRootDir}'"' >> "${configPath}"

